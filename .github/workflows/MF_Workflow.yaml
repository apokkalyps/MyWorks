on: [ push ]

env:
  BUILD_DIR: build

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    env:
      BUILD_DIR: ./build/

    strategy:
      matrix:
        CMAKE_CONFIG: [ Debug, Release ]
        os: [ ubuntu-latest, windows-latest ]
        MF_UNICODE: [ ON, OFF ]
      fail-fast: false

    steps:
      - name: SETUP - Checkout git repo
        uses: actions/checkout@v2

      - name: SETUP - Set up build tools
        if: ${{ false }} # ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt-get install valgrind

      - name: BUILD - CMake configure
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_CONFIG }} -DMF_IN_DEV=ON -DMF_UNICODE=${{ matrix.MF_UNICODE }} -S . -B ${{ env.BUILD_DIR }}

      - name: BUILD - CMake build
        run: |
          cmake --build ${{ env.BUILD_DIR }} -j10 --config=${{ matrix.CMAKE_CONFIG}} 

      - name: TEST - CTest
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest -j10 -C ${{ matrix.CMAKE_CONFIG }} -T test --output-on-failure

  code-quality-no-build-needed:
    runs-on: ubuntu-latest

    env:
      BUILD_DIR: ./build/
      CLANG_VERSION: 10
      CMAKE_CONFIG: Debug

      CC: /usr/bin/clang
      CXX: /usr/bin/clang++

    steps:
      - name: SETUP - Checkout git repo
        uses: actions/checkout@v2

      - name: CHECK - Clang-Format (formatting)
        uses: RafikFarhad/clang-format-github-action@v2.0.0
        with:
          sources: "**/*.hpp,**/*.cpp"

      - name: CHECK - CMake linting
        if: ${{ always() }}
        run: |
          pip install cmakelint
          find ./ -name "CMakeLists.txt" | xargs cmakelint --spaces=2 --linelength=100 --filter=-readability/wonkycase

  code-quality:
    runs-on: ubuntu-latest
    if: ${{ false }}

    env:
      BUILD_DIR: ./build/
      CLANG_VERSION: 10
      CMAKE_CONFIG: Debug
      CMAKE_EXPORT_COMPILE_COMMANDS: ON

      CC: /usr/bin/clang
      CXX: /usr/bin/clang++

    steps:
      - name: SETUP - Checkout git repo
        uses: actions/checkout@v2

      - name: SETUP - Install dependencies
        id: install-dependencies
        run: sudo apt update && sudo apt-get install clang-tidy

      - name: SETUP - CMake configure
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.CMAKE_CONFIG }} -Werror=dev -Werror=deprecated -G "Unix Makefiles" -S . -B ${{ env.BUILD_DIR }}

      - name: SETUP - CMake configure (again) # it can help for the compile commands
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.CMAKE_CONFIG }} -Werror=dev -Werror=deprecated -G "Unix Makefiles" -S . -B ${{ env.BUILD_DIR }}

      - name: CHECK - Clang-Tidy (static analysis)
        run: find ./ -name "*.cpp" -o -name "*.hpp" | grep -Ev "build" | xargs clang-tidy -p=${{ env.BUILD_DIR }} --warnings-as-errors=*
